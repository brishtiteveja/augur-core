# This software (Augur) allows buying and selling event options in Ethereum.
#
# Copyright (c) 2015 Forecast Foundation 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# If you have questions, please contact Joey Krug (joey@augur.net) or
# Jack Peterson (jack@augur.net).

# extern whitelist.se: [addAddress:ii:s, check:i:i, checkaddr:ii:i, replaceAddress:iii:s]
# WHITELIST = 0xd93ea5e50aad9442574a5613e800ff9c8236622d

extern events.se: [getEventBranch:i:i, getEventInfo:i:a, getExpiration:i:i, getMaxValue:i:i, getMinValue:i:i, getNumOutcomes:i:i, getOutcome:i:i, initializeEvent:iiiiii:i, setOutcome:ii:i]
EVENTS = 0xfdefa42a3209d3f320b220a234cd0cdea5e761f8

extern expiringEvents.se: [addEvent:iii:i, getAdjPrinComp:ii:a, getCovarianceMatrixRow:ii:a, getDeflated:ii:a, getEvent:iii:i, getEvents:ii:a, getLatent:ii:i, getLoadingVector:ii:a, getNewOne:ii:a, getNewTwo:ii:a, getNumberEvents:ii:i, getOutcomesFinal:ii:a, getReport:iiii:i, getReportHash:iii:i, getReporterBallot:iii:a, getReportsFilled:ii:a, getReportsMask:ii:a, getScores:ii:a, getSetOne:ii:a, getSetTwo:ii:a, getSmoothRep:ii:a, getTotalRepReported:ii:i, getVSize:ii:i, getWeightedCenteredData:ii:a, makeBallot:ii:a, moveEventsToCurrentPeriod:iii:i, returnOld:ii:a, setAdjPrinComp:iia:i, setCovarianceMatrixRow:iia:i, setDeflated:iia:i, setLatent:iii:i, setLoadingVector:iia:i, setNewOne:iia:i, setNewTwo:iia:i, setOld:iia:i, setOutcomesFinal:iia:i, setReportHash:iiii:i, setReporterBallot:iiiai:i, setReportsFilled:iia:i, setReportsMask:iia:i, setScores:iia:i, setSetOne:iia:i, setSetTwo:iia:i, setSmoothRep:iia:i, setTotalRepReported:iii:i, setVSize:iii:i, setWeightedCenteredData:iia:i]
EXPIRING = 0xf97d9fdba23823b2796446d4a45e18a7a1fdf905

extern reporting.se: [addRep:iii:i, addReporter:ii:i, faucet:_:_, getNumberReporters:i:i, getRepBalance:ii:i, getRepByIndex:ii:i, getReporterID:ii:i, getReputation:i:a, hashReport:ai:i, repIDToIndex:ii:i, setInitialReporters:ii:i, setRep:iii:i, subtractRep:iii:i]
REPORTING = 0xbe774ec2c537ea1a4981529568060456a650d639

extern center.se: [center:aaaaaii:a, covariance:aaii:a, tokenize:ai:a]
CENTER = 0x357938a55923451c8485fab9f7d148f53fa1005d

def center(branch, period, num_events, num_reports, flatsize):
    # if !WHITELIST.check(msg.sender):
    #     return(-1)
    with reputation = array(num_reports):
        with i = 0:
            while i < num_reports:
                reputation[i] = REPORTING.getRepByIndex(branch, i)
                i += 1
        with scaled = array(num_events):
            with scaled_max = array(num_events):
                with scaled_min = array(num_events):
                    with j = 0:
                        while j < num_events:
                            with event = EXPIRING.getEvent(branch, period, j):
                                if fix(EVENTS.getMaxValue(event)) != YES:
                                    scaled[j] = 1
                                    scaled_min[j] = fix(EVENTS.getMinValue(event))
                                    scaled_max[j] = fix(EVENTS.getMaxValue(event))
                                else:
                                    scaled[j] = 0
                                    scaled_min[j] = NO
                                    scaled_max[j] = YES
                            j += 1
                    with reports_filled = EXPIRING.getReportsFilled(branch, period, outsz=flatsize):
                        with lflatsize = flatsize + num_events + 2:
                            with result = CENTER.center(reports_filled, reputation, scaled, scaled_max, scaled_min, MAX_ITERATIONS, MAX_COMPONENTS, outsz=lflatsize):
                                wcd = slice(result, items=0, items=flatsize)
                                EXPIRING.setWeightedCenteredData(branch, period, wcd)
                                loading_vector = slice(result, items=flatsize, items=lflatsize)
                                EXPIRING.setLoadingVector(branch, period, loading_vector)
                                return(1)

def covariance(branch, period, num_events, num_reports, flatsize):
    # if !WHITELIST.check(msg.sender):
    #     return(-1)
    with reputation = array(num_reports):
        with i = 0:
            while i < num_reports:
                reputation[i] = REPORTING.getRepByIndex(branch, i)
                i += 1
        with reptokens = CENTER.tokenize(reputation, num_reports, outsz=num_reports):
            with wcd = EXPIRING.getWeightedCenteredData(branch, period, outsz=flatsize):
                with covrow = CENTER.covariance(wcd, reptokens, num_reports, num_events, outsz=num_events):
                    EXPIRING.setCovarianceMatrixRow(branch, period, covrow)
                    EXPIRING.setDeflated(branch, period, wcd)
                    return(1)

inset('../macros/constants.se')
inset('../macros/fixed.se')
