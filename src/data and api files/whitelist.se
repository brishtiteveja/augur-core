data Whitelists[](owner, addresses[])

macro owner():
    self.Whitelists[address1].owner

macro addresses():
    self.Whitelists[address1].addresses

def addAddress(address1, address2):
    claimed = 0
    if owner() == 0:
        claimed = 1
        owner() = tx.origin
    if owner() != tx.origin:
        return(text("ERROR: You don't own that addresses whitelist!!!"):str)
    if addresses()[address2] != 0:
        return(text("ERROR: That address is already in the whitelist!!!"):str)
    addresses()[address2] = 1
    if claimed:
        return(text("OK! Address added to whitelist and whitelist claimed!"):str)
    else:
        return(text("Ok! Address added to whitelist!"):str)

def replaceAddress(address1, address2, address3):
    if owner() == 0:
        return(text("ERROR: That address has not been claimed!"):str)
    if owner() != tx.origin:
        return(text("ERROR: You don't own that address's whitelist!"):str)
    if addresses()[address2] == 1:
        addresses()[address2] = 0
        addresses()[address3] = 1
        return(text("OK! Address successfully replaced"):str)
    return(text("ERROR: No address found for replacement!"):str)

def check(address):
    address1 = msg.sender
    return(addresses()[address])

def checkaddr(address1, address2):
    return(addresses()[address2])
